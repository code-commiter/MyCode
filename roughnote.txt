def removeComments(fileContent) {
    // Remove single line comments and block comments
    return fileContent.replaceAll(/\/\/.*?$|\/\*.*?\*\//, '', [Pattern.MULTILINE])
}

def validateAssignments(pipelineContent) {
    // Pattern for invalid cases (variable-to-variable assignments and method definitions)
    def invalidPattern = /(\w+)\s*=\s*(\w+)|def\s+\w+\s*\(\s*\)\s*\{/

    // Check for any invalid patterns
    return !(pipelineContent =~ invalidPattern) // Return true if valid
}

def validatePipelines(fileContent) {
    // Remove comments before validation
    fileContent = removeComments(fileContent)

    // Find pipelines and count them
    def pipelines = fileContent.findAll(/(?<name>\w+)\s*\n?\s*\{/)

    // Check if there are multiple pipelines
    if (pipelines.size() > 1) {
        return "Invalid: More than one pipeline found."
    }

    // If there is exactly one pipeline, validate it
    if (pipelines.size() == 1) {
        def pipelineMatch = pipelines[0]
        def pipelineName = pipelineMatch[0] // Capture the pipeline name
        def pipelineContent = fileContent.split(/(?=\w+\s*\n?\s*\{)/)[0] // Get the first pipeline

        if (!validateAssignments(pipelineContent)) {
            return "Invalid assignments found in the pipeline."
        }

        return "Pipeline '${pipelineName}' is valid."
    }

    return "No pipelines found."
}

// Example content with multiple pipelines and opening braces on new lines
def fileContent = """
// This is a single line comment
pipeline1 
{
    var1 = true // Valid
    var2 = false // Valid
    var3 = anotherVarName // Invalid
}

pipeline2 {
    def myMethod() { // Invalid
        // Some logic here
    }
    var4 = "someString" // Valid
}

pipeline3
{
    var5 = [1, 2, 3] // Valid
}
"""

println(validatePipelines(fileContent))
